/**
 * Component: Items
 */
@include comp('items') {
  $gap: 4;
  $grid-size: 80;
  $tab-icon-size: 20;
  $tab-font-size: 14;

  position: relative;
  flex: 1 1 100%;
  max-width: 100%;
  min-width: 0;

  @include elem('tabs', 'tab-item', 'grid', 'cell') {
    position: relative;
    display: flex;
    flex-flow: row wrap;
    justify-content: flex-start;
    align-content: flex-start;
    align-items: flex-start;
    flex: none;
    padding: 0;
    margin: 0;
  }

  @include elem('grid') {
    display: none;
    @include when('selected') {
      display: flex;
    }
    padding: px($gap * 2) 0;
    margin: 0 px(-$gap / 2);
  }
  @include elem('cell') {
    padding: px($gap / 2);
  }

  @include elem('tabs') {
    display: inline-flex;
    background-color: darken(white, 40%);
    border-radius: px($border-radius-base);
    padding: px(1);
    // margin: px(-1);
  }
  @include elem('tab-item') {
    // padding: px(1);
  }

  @include elem('tab-button') {
    position: relative;
    flex: none;
    display: inline-flex;
    justify-content: flex-start;
    align-content: center;
    align-items: center;

    font-size: px($tab-font-size);
    line-height: 1;

    height: px($tab-icon-size / $golden-ratio);
    padding: 0 px($tab-icon-size * $golden-ratio);
    margin: 0;
    border: px(1) solid;
    border-color: rgba(white, 0.3) rgba($color-brown, 0.1) rgba($color-brown, 0.2);
    border-radius: px($border-radius-base);
    color: white;
  }
  @include elem('tab-button-icon') {
    font-size: px($tab-icon-size);
    margin-right: px($tab-font-size * $golden-ratio);
  }
  @include elem('tab-button-icon', 'tab-button-label') {
    opacity: 0.8;
    filter: saturate(0) brightness(0.4);
  }
  @include elem('tab-button') {
    outline: 0;
    background-color: $color-bisque;
    &:hover,
    &:focus {
      background-color: lighten($color: $color-bisque, $amount: 5%);
    }
    @include when('selected') {
      background-color: $color-brown;
      &:hover {
        background-color: lighten($color: $color-brown, $amount: 5%);
      }
      @include elem('tab-button-icon', 'tab-button-label') {
        filter: saturate(0) brightness(1);
      }
    }
  }

  @include elem('item') {
    cursor: pointer;
    user-select: none;

    position: relative;
    width: px($grid-size);
    min-height: px($grid-size);
    display: flex;
    flex-flow: column nowrap;
    justify-content: flex-start;
    align-content: center;
    align-items: center;

    border: px(1.5) solid $color-border-common;
    border-radius: px($border-radius-base);
    padding: px(4);
  }
  @include elem('item-container', 'item-icon', 'item-label') {
    position: relative;
  }
  @include elem('item-container') {
    display: flex;
    width: px($grid-size * $golden-ratio);
    height: px($grid-size * $golden-ratio);
    padding: px(4);
    &::before {
      z-index: 1;
    }
    &::after {
      z-index: 2;
    }
  }
  @include elem('item-icon') {
    z-index: 3;
    width: 100%;
    height: 100%;
  }
  @include elem('item-label') {
    flex: 1;
    text-align: center;
    font-size: px(12);
    padding-top: px(4);
  }
  @include elem('item') {
    outline: 0;
    color: $color-peru;
    background-color: $color-bisque;
    &:hover,
    &:focus {
      color: $color-brown;
      background-color: lighten($color: $color-bisque, $amount: 5%);
    }
  }

  // when the genre is 'items'
  @include prop(
    (
      'genre': 'items',
    )
  ) {
    @include elem('item') {
      @include elem('item-container') {
        background-size: 100%;
        background-position: center;
        background-image: url($bgr-item-holder);

        &::before,
        &::after {
          content: ' ';
          position: absolute;
          top: 0;
          bottom: 0;
          left: 0;
          right: 0;
          background-size: 100%;
          background-position: center;
          mix-blend-mode: multiply;
        }
        &::before {
          background-color: $color-bisque;
          opacity: 0.5;
        }
        &::after {
          background-color: $color-bisque;
          opacity: 0.2;
        }
      }
      @each $rarity in $rarity-set {
        @include when($rarity) {
          @include elem('item-container') {
            &::before {
              background-color: map-get($map: $rarity-color-map, $key: $rarity);
            }
            &::after {
              background-image: url(map-get($map: $rarity-bgr-map, $key: $rarity));
            }
          }
        }
      }
    }
  }
}
